const puppeteer = require('puppeteer');
const cheerio = require('cheerio');
const process = require('process')
import { Prisma, PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

/*function for loading scraped items to DB*/

export async function loadToDB (items:object[]){

    /*define interface for an item*/
    interface prop {title:string,img:string}

    var ind:number = 0

    /*loop throught array of input items and save them in DB*/
    for(let i in items){
        
        const property:prop = Object(items[i])
        ind += 1
        const promise = await prisma.properties.create({data:{

            index: ind,
            Title:property.title,
            ImageURL:property.img
        }})
        console.log("item " + i.toString() + " saved")
    }
}

  /*function for scraping the data - majority of function was autogenerated by the tool on
  following URL: https://nextjs-scraper-playground.vercel.app*/

  export async function getSreality (req?:any, res?:any) {

    console.log("function activated")
    /*define selectors for selecting title (all per page) and image URL (only first from all parents div per page)*/
  const titleSelector = '.basic h2 .title';
  const imgSelector = '._2xzMRvpz7TDA2twKCXTS4R a:nth-child(1)' 
  
  var result:any[] = [] /*prepare container for scraped items */
  const browser = await puppeteer.launch() /* launch browser at the backround*/
  const page = await browser.newPage() /*launch new page on browser */

  /*loop throught the range <1;25> (due to pagination) and select desired URL*/ 

  for(let j = 1; j < 26; j++){

        var URL:string

        if(j == 1){

             URL = 'https://sreality.cz/en/search/for-sale/apartments'}
        else{
            URL = 'https://sreality.cz/en/search/for-sale/apartments?page=' + j.toString() 
        }
  
  try {

    /*laod selected URL */
    await page.goto(URL, {
      waitUntil: 'domcontentloaded'
    });

    /*load body of HTML source code of selected URL*/
    await page.waitForSelector(titleSelector);
    const html = await page.evaluate(() => {
      return document?.querySelector('body')!.innerHTML;
    });

    const $ = cheerio.load(html)

    /*populate container array by objects, each object will include different title and imageURL*/
    for (let i:number = 0; i < $(imgSelector).length; i++) {
      result.push({});
    }

    /*loop throught all titles on page, extract unneccessary characters and save them in objects in container array*/
    $(titleSelector).each((i:number, elem:any) => {

        let raw_title:string = $(elem).text()

        /*index of array must be calculated by the formula bacause otherwise only indexes in rage <1;20> would be used and
        after scraping data from new page it would just overwrite previous 20 items*/
        result[i+(j-1)*20].title = raw_title.replace(/(\r\n|\n|\r)/gm, '').trim()
    })

    /*loop throught first images in all parents div per page and extracts source URL*/
    $(imgSelector).each((i:number, elem:any) => {
        result[i+(j-1)*20].img = $(elem).find('img').attr('src')
      })

  } catch (error) { if (error instanceof Error){
    console.log('error', error);
    return res.status(500).send(error.message);
  }
}
console.log("scraped page: " + j.toString())
}

/*after scraping is done, close the browser and call fn. loadToDB*/
await browser.close()
await loadToDB(result)

}


export const config = {
  api: {
    externalResolver: true
  }
}
